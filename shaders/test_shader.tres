[gd_resource type="VisualShader" load_steps=11 format=3 uid="uid://bogu7y2vwpcck"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_givw6"]
expanded_output_ports = [0]
input_name = "color"

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_3qlbb"]
default_input_values = [0, 0.0, 1, 1.0, 2, 1e-05, 3, Vector3(0.175, 0.165, 0.775), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_mjdhw"]
default_input_values = [0, 0.0, 1, 100.0]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_gw2nn"]
expanded_output_ports = [0]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_et2h3"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(21.11, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_wuwse"]
default_input_values = [0, 0.0, 1, 0.0, 2, 1e-05, 3, Vector3(100, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_y2w5a"]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_6ny55"]

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_isewa"]
function = 0

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_ejl8m"]
default_input_values = [0, 0.0, 1, 0.5]
operator = 2

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;




void vertex() {
// Input:2
	vec2 n_out2p0 = VERTEX;
	float n_out2p2 = n_out2p0.g;


// Input:6
	float n_out6p0 = TIME;


// FloatOp:9
	float n_in9p1 = 0.50000;
	float n_out9p0 = n_out6p0 * n_in9p1;


// FloatFunc:8
	float n_out8p0 = sin(n_out9p0);


// FloatOp:10
	float n_in10p1 = 100.00000;
	float n_out10p0 = n_out8p0 * n_in10p1;


// VectorCompose:7
	float n_in7p1 = 0.00000;
	float n_in7p2 = 0.00000;
	vec3 n_out7p0 = vec3(n_out10p0, n_in7p1, n_in7p2);


	vec3 n_out5p0;
// If:5
	float n_in5p1 = 0.00000;
	float n_in5p2 = 0.00001;
	vec3 n_in5p4 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in5p5 = vec3(0.00000, 0.00000, 0.00000);
	if(abs(n_out2p2 - n_in5p1) < n_in5p2)
	{
		n_out5p0 = n_out7p0;
	}
	else if(n_out2p2 < n_in5p1)
	{
		n_out5p0 = n_in5p5;
	}
	else
	{
		n_out5p0 = n_in5p4;
	}


// VectorOp:4
	vec2 n_out4p0 = n_out2p0 + vec2(n_out5p0.xy);


// Output:0
	VERTEX = n_out4p0;


}

void fragment() {
// Input:2
	vec4 n_out2p0 = COLOR;
	float n_out2p1 = n_out2p0.r;


	vec3 n_out3p0;
// If:3
	float n_in3p1 = 1.00000;
	float n_in3p2 = 0.00001;
	vec3 n_in3p3 = vec3(0.17500, 0.16500, 0.77500);
	if(abs(n_out2p1 - n_in3p1) < n_in3p2)
	{
		n_out3p0 = n_in3p3;
	}
	else if(n_out2p1 < n_in3p1)
	{
		n_out3p0 = vec3(n_out2p0.xyz);
	}
	else
	{
		n_out3p0 = vec3(n_out2p0.xyz);
	}


// Output:0
	COLOR.rgb = n_out3p0;


}
"
graph_offset = Vector2(-926.519, -69.4835)
mode = 1
flags/light_only = false
nodes/vertex/0/position = Vector2(560, 140)
nodes/vertex/2/node = SubResource("VisualShaderNodeInput_gw2nn")
nodes/vertex/2/position = Vector2(-1160, 340)
nodes/vertex/4/node = SubResource("VisualShaderNodeVectorOp_et2h3")
nodes/vertex/4/position = Vector2(20, 240)
nodes/vertex/5/node = SubResource("VisualShaderNodeIf_wuwse")
nodes/vertex/5/position = Vector2(-600, 240)
nodes/vertex/6/node = SubResource("VisualShaderNodeInput_y2w5a")
nodes/vertex/6/position = Vector2(-1900, 620)
nodes/vertex/7/node = SubResource("VisualShaderNodeVectorCompose_6ny55")
nodes/vertex/7/position = Vector2(-880, 540)
nodes/vertex/8/node = SubResource("VisualShaderNodeFloatFunc_isewa")
nodes/vertex/8/position = Vector2(-1360, 660)
nodes/vertex/9/node = SubResource("VisualShaderNodeFloatOp_ejl8m")
nodes/vertex/9/position = Vector2(-1600, 600)
nodes/vertex/10/node = SubResource("VisualShaderNodeFloatOp_mjdhw")
nodes/vertex/10/position = Vector2(-1100, 660)
nodes/vertex/connections = PackedInt32Array(4, 0, 0, 0, 2, 2, 5, 0, 2, 0, 4, 0, 5, 0, 4, 1, 7, 0, 5, 3, 6, 0, 9, 0, 9, 0, 8, 0, 8, 0, 10, 0, 10, 0, 7, 0)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_givw6")
nodes/fragment/2/position = Vector2(-820, 180)
nodes/fragment/3/node = SubResource("VisualShaderNodeIf_3qlbb")
nodes/fragment/3/position = Vector2(-3.33093, 225.13)
nodes/fragment/connections = PackedInt32Array(2, 1, 3, 0, 3, 0, 0, 0, 2, 0, 3, 4, 2, 0, 3, 5)
